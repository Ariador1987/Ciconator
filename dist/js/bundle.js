"use strict";!function(){var __webpack_modules__={"./src/js/accordion.js":function srcJsAccordionJs(){eval('const accordions = document.querySelectorAll(".accordion");\r\nconst accordionContents = document.querySelectorAll(".accordion-content");\r\n\r\naccordions.forEach((acc) =>\r\n    acc.addEventListener("click", (e) => {\r\n        handleAccordions(acc, e);\r\n    })\r\n);\r\n\r\nfunction handleAccordions(accordion, event) {\r\n    if (!event.target.classList.contains("accordion-heading--icon")) return;\r\n\r\n    event.target.textContent.trim() === "+"\r\n        ? (event.target.textContent = "-")\r\n        : (event.target.textContent = "+");\r\n\r\n    if (\r\n        accordion.firstElementChild.nextElementSibling.classList.contains(\r\n            "hidden"\r\n        )\r\n    ) {\r\n        accordion.firstElementChild.nextElementSibling.classList.remove(\r\n            "hidden"\r\n        );\r\n        accordion.firstElementChild.nextElementSibling.classList.add("show");\r\n    } else {\r\n        accordion.firstElementChild.nextElementSibling.classList.remove("show");\r\n        accordion.firstElementChild.nextElementSibling.classList.add("hidden");\r\n    }\r\n}\r\n\r\nwindow.addEventListener("DOMContentLoaded", () => {\r\n    [...accordionContents].forEach((el) => el.classList.add("hidden"));\r\n});\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/accordion.js?')},"./src/js/gallery.js":function srcJsGalleryJs(){eval('// import { slike } from "../js/kategorije/data.js";\r\n\r\n// class Gallery {\r\n//     #element = null;\r\n//     #list = [];\r\n//     #modal = null;\r\n//     #modalImg = null;\r\n//     #modalImages = [];\r\n//     #closeBtn = null;\r\n//     #nextBtn = null;\r\n//     #prevBtn = null;\r\n//     #imageName = null;\r\n\r\n//     constructor(element) {\r\n//         this.#element = element;\r\n//         // console.log(this.#element);\r\n//         this.initProps();\r\n//         this.openModal();\r\n//         this.closeModal();\r\n//     }\r\n\r\n//     setImages(element) {\r\n//         // convert nodeList to Arr\r\n//         this.#list = [...element.querySelectorAll(".gallery-img")];\r\n//     }\r\n\r\n//     setModal(element) {\r\n//         this.#modal = element.parentElement.querySelector(\r\n//             ".section-gallery__modal"\r\n//         );\r\n//     }\r\n\r\n//     setModalImg(element) {\r\n//         this.#modalImg = element.parentElement.querySelector(".main-img");\r\n//     }\r\n\r\n//     setModalImages(element) {\r\n//         this.#modalImages = [\r\n//             ...element.parentElement.querySelectorAll(".modal-img"),\r\n//         ];\r\n//     }\r\n\r\n//     setImageName(element) {\r\n//         this.#imageName = element.parentElement.querySelector(".image-name");\r\n//     }\r\n\r\n//     setCloseBtn() {\r\n//         if (this.#modal) {\r\n//             this.#closeBtn = this.#modal.querySelector(".close-btn");\r\n//         }\r\n//     }\r\n\r\n//     setNextBtn() {\r\n//         this.#nextBtn = this.#modal.querySelector(".next-btn");\r\n//     }\r\n\r\n//     setPrevBtn() {\r\n//         this.#prevBtn = this.#modal.querySelector(".prev-btn");\r\n//     }\r\n\r\n//     initProps() {\r\n//         this.setImages(this.#element);\r\n//         this.setModal(this.#element);\r\n//         this.setModalImg(this.#element);\r\n//         this.setModalImages(this.#element);\r\n//         this.setImageName(this.#element);\r\n//         this.setCloseBtn();\r\n//         this.setNextBtn();\r\n//         this.setPrevBtn();\r\n//     }\r\n\r\n//     openModal() {\r\n//         this.#element.addEventListener("click", (e) => {\r\n//             this.#modal.classList.add("open");\r\n//             this.setOpenModalImages(e.target);\r\n//         });\r\n//     }\r\n\r\n//     closeModal() {\r\n//         this.#modal.addEventListener("click", (e) => {\r\n//             if (\r\n//                 e.target.classList.value === "section-gallery__modal open" ||\r\n//                 e.target.classList.contains("fa-times")\r\n//             ) {\r\n//                 this.#modal.classList.remove("open");\r\n//             }\r\n//         });\r\n//     }\r\n\r\n//     setOpenModalImages(mainImage) {\r\n//         // mainImage is e.target from click\r\n//         const category = this.getAppropriateCategory(mainImage);\r\n//         this.renderModalHTML(mainImage, category);\r\n//     }\r\n\r\n//     getAppropriateCategory(mainImage) {\r\n//         if (!mainImage.dataset.name) {\r\n//             console.error(\r\n//                 "something went wrong with getting category for image"\r\n//             );\r\n//             return;\r\n//         }\r\n//         const categoryName = mainImage.dataset.name;\r\n//         const appropariateCategory = slike.find((x) => x.ime === categoryName);\r\n//         return appropariateCategory;\r\n//     }\r\n\r\n//     renderModalHTML(mainImage, category) {\r\n//         let mainItem = mainImage;\r\n//         let id = +mainItem.dataset.id;\r\n//         const selected = category.images.find((x) => x.id === id);\r\n//         this.#modal.innerHTML = `\r\n//         <button class="close-btn">\r\n//             <i class="fas fa-times"></i>\r\n//         </button>\r\n//         <div class="section-gallery__modal--content">\r\n//             <button class="prev-btn">\r\n//                 <i class="fas fa-chevron-left"></i>\r\n//             </button>\r\n//             <button class="next-btn">\r\n//                 <i class="fas fa-chevron-right"></i>\r\n//             </button>\r\n//             <img src="${selected.src}" alt="cat" data-name=${\r\n//             category.ime\r\n//         } data-id="${selected.id}" class="main-img">\r\n//             <p class="image-name">${selected.description}</p>\r\n//             <div class="modal-images g-1">\r\n//                 ${category.images\r\n//                     .map(\r\n//                         (el) =>\r\n//                             `<img src="${el.src}" alt="cat" data-id=${\r\n//                                 el.id\r\n//                             } data-name=${category.ime} class="modal-img ${\r\n//                                 el.id === selected.id ? "selected" : ""\r\n//                             }">`\r\n//                     )\r\n//                     .join("")}\r\n//             </div>\r\n//         </div>\r\n//         `;\r\n//     }\r\n// }\r\n\r\n// {\r\n//     /* <img src="./img/galleryphotos/cat-1.jpg" alt="cat" class="modal-img selected">\r\n//                 <img src="./img/galleryphotos/cat-2.jpg" alt="cat" class="modal-img">\r\n//                 <img src="./img/galleryphotos/cat-3.jpg" alt="cat" class="modal-img"></img> */\r\n// }\r\n\r\n// function setElement(selection) {\r\n//     const element = document.querySelector(selection);\r\n//     if (element) {\r\n//         return element;\r\n//     }\r\n//     throw new Error(\r\n//         `Please check "${selection}" selector, no such element exists`\r\n//     );\r\n// }\r\n\r\n// const kapije = new Gallery(setElement(".kapije"));\r\n// const ograde = new Gallery(setElement(".ograde"));\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/gallery.js?')},"./src/js/main.js":function srcJsMainJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _testimonials_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./testimonials.js */ "./src/js/testimonials.js");\n/* harmony import */ var _accordion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accordion.js */ "./src/js/accordion.js");\n/* harmony import */ var _accordion_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_accordion_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _gallery_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gallery.js */ "./src/js/gallery.js");\n/* harmony import */ var _gallery_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_gallery_js__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\n\r\nconst togglerBtn = document.querySelector(".main-nav--toggler");\r\nconst linksContainer = document.querySelector(".main-nav__links-container");\r\nconst hamburgerLines = document.querySelectorAll(".main-nav--toggler-line");\r\n\r\ntogglerBtn.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    hamburgerLines.forEach((el) => el.classList.toggle("active"));\r\n    linksContainer.classList.toggle("active");\r\n});\r\n\r\nlinksContainer.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    if ([...hamburgerLines].some((el) => el.classList.contains("active"))) {\r\n        hamburgerLines.forEach((el) => el.classList.remove("active"));\r\n        linksContainer.classList.remove("active");\r\n    }\r\n});\r\n\r\n// document.addEventListener("DOMContentLoaded", () => {\r\n//     [...accordionContents].forEach((el) => el.classList.add("hidden"));\r\n// });\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/main.js?')},"./src/js/reviews.js":function srcJsReviewsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "reviews": () => (/* binding */ reviews)\n/* harmony export */ });\nconst reviews = [\r\n    {\r\n        id: 1,\r\n        name: "Cat One",\r\n        job: "UX",\r\n        img: "img/cat-1.jpg",\r\n        text: "Odličan posao na našoj kući u Vinišću, izuzetno smo zadovoljni kvalitetom i radom.",\r\n    },\r\n    {\r\n        id: 2,\r\n        name: "Cat Two",\r\n        job: "Graphics",\r\n        img: "img/cat-2.jpg",\r\n        text: "This is some random text",\r\n    },\r\n    {\r\n        id: 3,\r\n        name: "Cat One",\r\n        job: "Tester",\r\n        img: "img/cat-3.jpg",\r\n        text: "This is some random text",\r\n    },\r\n];\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/reviews.js?')},"./src/js/testimonials.js":function srcJsTestimonialsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _reviews_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reviews.js */ "./src/js/reviews.js");\n\r\n\r\nconst testimonialContainer = document.querySelector(".testimonials");\r\nconst testimonialImg = document.querySelector(".testimonials__img");\r\nconst testimonialTitle = document.querySelector(".testimonials__title");\r\nconst testimonialJob = document.querySelector(".testimonials__job");\r\nconst testimonialInfo = document.querySelector(".testimonials__info");\r\nconst btnTestimonialLeft = document.querySelector(\r\n    ".testimonials__button--left"\r\n);\r\nconst btnTestimonialRight = document.querySelector(\r\n    ".testimonials__button--right"\r\n);\r\n\r\n// State\r\nlet currentNumber = 0;\r\nconst intervalTiming = 2250;\r\nlet interval = setInterval(() => intervalSetup(), intervalTiming);\r\n\r\n// Event Listeners\r\ntestimonialContainer.addEventListener("mouseover", () => {\r\n    clearInterval(interval);\r\n});\r\n\r\ntestimonialContainer.addEventListener("mouseout", () => {\r\n    interval = setInterval(() => intervalSetup(), intervalTiming);\r\n});\r\n\r\nbtnTestimonialLeft.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    currentNumber--;\r\n    moveItem();\r\n});\r\n\r\nbtnTestimonialRight.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    currentNumber++;\r\n    moveItem();\r\n});\r\n\r\nwindow.addEventListener("DOMContentLoaded", () => {\r\n    const item = _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews[currentNumber];\r\n    setProperties(item);\r\n});\r\n\r\n// Logic - Functions\r\nfunction adjustNumber(num) {\r\n    if (num < 0) {\r\n        currentNumber = _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews.length - 1;\r\n        return currentNumber;\r\n    }\r\n    if (num > _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews.length - 1) {\r\n        currentNumber = 0;\r\n        return currentNumber;\r\n    }\r\n}\r\n\r\nfunction intervalSetup() {\r\n    currentNumber++;\r\n    moveItem();\r\n}\r\n\r\nfunction moveItem() {\r\n    if (isValidNumber(currentNumber)) {\r\n        setProperties(_reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews[currentNumber]);\r\n        return;\r\n    }\r\n    adjustNumber(currentNumber);\r\n    setProperties(_reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews[currentNumber]);\r\n}\r\n\r\nfunction isValidNumber(num) {\r\n    return Number.isFinite(num) && num >= 0 && num < _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews.length;\r\n}\r\n\r\nfunction setProperties(item) {\r\n    testimonialImg.src = item.img;\r\n    testimonialTitle.textContent = item.name;\r\n    testimonialJob.textContent = item.job;\r\n    testimonialInfo.textContent = item.text;\r\n}\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/testimonials.js?')}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];return void 0!==n||(n=__webpack_module_cache__[e]={exports:{}},__webpack_modules__[e](n,n.exports,__webpack_require__)),n.exports}__webpack_require__.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=function(e,n){for(var r in n)__webpack_require__.o(n,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},__webpack_require__.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/js/main.js")}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJidW5kbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gKiBBVFRFTlRJT046IFRoZSBcImV2YWxcIiBkZXZ0b29sIGhhcyBiZWVuIHVzZWQgKG1heWJlIGJ5IGRlZmF1bHQgaW4gbW9kZTogXCJkZXZlbG9wbWVudFwiKS5cbiAqIFRoaXMgZGV2dG9vbCBpcyBuZWl0aGVyIG1hZGUgZm9yIHByb2R1Y3Rpb24gbm9yIGZvciByZWFkYWJsZSBvdXRwdXQgZmlsZXMuXG4gKiBJdCB1c2VzIFwiZXZhbCgpXCIgY2FsbHMgdG8gY3JlYXRlIGEgc2VwYXJhdGUgc291cmNlIGZpbGUgaW4gdGhlIGJyb3dzZXIgZGV2dG9vbHMuXG4gKiBJZiB5b3UgYXJlIHRyeWluZyB0byByZWFkIHRoZSBvdXRwdXQgZmlsZSwgc2VsZWN0IGEgZGlmZmVyZW50IGRldnRvb2wgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9kZXZ0b29sLylcbiAqIG9yIGRpc2FibGUgdGhlIGRlZmF1bHQgZGV2dG9vbCB3aXRoIFwiZGV2dG9vbDogZmFsc2VcIi5cbiAqIElmIHlvdSBhcmUgbG9va2luZyBmb3IgcHJvZHVjdGlvbi1yZWFkeSBvdXRwdXQgZmlsZXMsIHNlZSBtb2RlOiBcInByb2R1Y3Rpb25cIiAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL21vZGUvKS5cbiAqL1xuXG4vKioqKioqL1xuKGZ1bmN0aW9uICgpIHtcbiAgLy8gd2VicGFja0Jvb3RzdHJhcFxuXG4gIC8qKioqKiovXG4gIHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0ge1xuICAgIC8qKiovXG4gICAgXCIuL3NyYy9qcy9hY2NvcmRpb24uanNcIjpcbiAgICAvKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgICAgICEqKiogLi9zcmMvanMvYWNjb3JkaW9uLmpzICoqKiFcbiAgICAgIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAvKioqL1xuICAgIGZ1bmN0aW9uIHNyY0pzQWNjb3JkaW9uSnMoKSB7XG4gICAgICBldmFsKFwiY29uc3QgYWNjb3JkaW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXFxcIi5hY2NvcmRpb25cXFwiKTtcXHJcXG5jb25zdCBhY2NvcmRpb25Db250ZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXFxcIi5hY2NvcmRpb24tY29udGVudFxcXCIpO1xcclxcblxcclxcbmFjY29yZGlvbnMuZm9yRWFjaCgoYWNjKSA9PlxcclxcbiAgICBhY2MuYWRkRXZlbnRMaXN0ZW5lcihcXFwiY2xpY2tcXFwiLCAoZSkgPT4ge1xcclxcbiAgICAgICAgaGFuZGxlQWNjb3JkaW9ucyhhY2MsIGUpO1xcclxcbiAgICB9KVxcclxcbik7XFxyXFxuXFxyXFxuZnVuY3Rpb24gaGFuZGxlQWNjb3JkaW9ucyhhY2NvcmRpb24sIGV2ZW50KSB7XFxyXFxuICAgIGlmICghZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcXFwiYWNjb3JkaW9uLWhlYWRpbmctLWljb25cXFwiKSkgcmV0dXJuO1xcclxcblxcclxcbiAgICBldmVudC50YXJnZXQudGV4dENvbnRlbnQudHJpbSgpID09PSBcXFwiK1xcXCJcXHJcXG4gICAgICAgID8gKGV2ZW50LnRhcmdldC50ZXh0Q29udGVudCA9IFxcXCItXFxcIilcXHJcXG4gICAgICAgIDogKGV2ZW50LnRhcmdldC50ZXh0Q29udGVudCA9IFxcXCIrXFxcIik7XFxyXFxuXFxyXFxuICAgIGlmIChcXHJcXG4gICAgICAgIGFjY29yZGlvbi5maXJzdEVsZW1lbnRDaGlsZC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmNvbnRhaW5zKFxcclxcbiAgICAgICAgICAgIFxcXCJoaWRkZW5cXFwiXFxyXFxuICAgICAgICApXFxyXFxuICAgICkge1xcclxcbiAgICAgICAgYWNjb3JkaW9uLmZpcnN0RWxlbWVudENoaWxkLm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKFxcclxcbiAgICAgICAgICAgIFxcXCJoaWRkZW5cXFwiXFxyXFxuICAgICAgICApO1xcclxcbiAgICAgICAgYWNjb3JkaW9uLmZpcnN0RWxlbWVudENoaWxkLm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QuYWRkKFxcXCJzaG93XFxcIik7XFxyXFxuICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICBhY2NvcmRpb24uZmlyc3RFbGVtZW50Q2hpbGQubmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5yZW1vdmUoXFxcInNob3dcXFwiKTtcXHJcXG4gICAgICAgIGFjY29yZGlvbi5maXJzdEVsZW1lbnRDaGlsZC5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmFkZChcXFwiaGlkZGVuXFxcIik7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXFxcIkRPTUNvbnRlbnRMb2FkZWRcXFwiLCAoKSA9PiB7XFxyXFxuICAgIFsuLi5hY2NvcmRpb25Db250ZW50c10uZm9yRWFjaCgoZWwpID0+IGVsLmNsYXNzTGlzdC5hZGQoXFxcImhpZGRlblxcXCIpKTtcXHJcXG59KTtcXHJcXG5cXG5cXG4vLyMgc291cmNlVVJMPXdlYnBhY2s6Ly9ndWxwc3RhcnRlci8uL3NyYy9qcy9hY2NvcmRpb24uanM/XCIpO1xuICAgICAgLyoqKi9cbiAgICB9LFxuXG4gICAgLyoqKi9cbiAgICBcIi4vc3JjL2pzL2dhbGxlcnkuanNcIjpcbiAgICAvKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICAgICAhKioqIC4vc3JjL2pzL2dhbGxlcnkuanMgKioqIVxuICAgICAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAvKioqL1xuICAgIGZ1bmN0aW9uIHNyY0pzR2FsbGVyeUpzKCkge1xuICAgICAgZXZhbChcIi8vIGltcG9ydCB7IHNsaWtlIH0gZnJvbSBcXFwiLi4vanMva2F0ZWdvcmlqZS9kYXRhLmpzXFxcIjtcXHJcXG5cXHJcXG4vLyBjbGFzcyBHYWxsZXJ5IHtcXHJcXG4vLyAgICAgI2VsZW1lbnQgPSBudWxsO1xcclxcbi8vICAgICAjbGlzdCA9IFtdO1xcclxcbi8vICAgICAjbW9kYWwgPSBudWxsO1xcclxcbi8vICAgICAjbW9kYWxJbWcgPSBudWxsO1xcclxcbi8vICAgICAjbW9kYWxJbWFnZXMgPSBbXTtcXHJcXG4vLyAgICAgI2Nsb3NlQnRuID0gbnVsbDtcXHJcXG4vLyAgICAgI25leHRCdG4gPSBudWxsO1xcclxcbi8vICAgICAjcHJldkJ0biA9IG51bGw7XFxyXFxuLy8gICAgICNpbWFnZU5hbWUgPSBudWxsO1xcclxcblxcclxcbi8vICAgICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XFxyXFxuLy8gICAgICAgICB0aGlzLiNlbGVtZW50ID0gZWxlbWVudDtcXHJcXG4vLyAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuI2VsZW1lbnQpO1xcclxcbi8vICAgICAgICAgdGhpcy5pbml0UHJvcHMoKTtcXHJcXG4vLyAgICAgICAgIHRoaXMub3Blbk1vZGFsKCk7XFxyXFxuLy8gICAgICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcXHJcXG4vLyAgICAgfVxcclxcblxcclxcbi8vICAgICBzZXRJbWFnZXMoZWxlbWVudCkge1xcclxcbi8vICAgICAgICAgLy8gY29udmVydCBub2RlTGlzdCB0byBBcnJcXHJcXG4vLyAgICAgICAgIHRoaXMuI2xpc3QgPSBbLi4uZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFxcXCIuZ2FsbGVyeS1pbWdcXFwiKV07XFxyXFxuLy8gICAgIH1cXHJcXG5cXHJcXG4vLyAgICAgc2V0TW9kYWwoZWxlbWVudCkge1xcclxcbi8vICAgICAgICAgdGhpcy4jbW9kYWwgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcihcXHJcXG4vLyAgICAgICAgICAgICBcXFwiLnNlY3Rpb24tZ2FsbGVyeV9fbW9kYWxcXFwiXFxyXFxuLy8gICAgICAgICApO1xcclxcbi8vICAgICB9XFxyXFxuXFxyXFxuLy8gICAgIHNldE1vZGFsSW1nKGVsZW1lbnQpIHtcXHJcXG4vLyAgICAgICAgIHRoaXMuI21vZGFsSW1nID0gZWxlbWVudC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXFxcIi5tYWluLWltZ1xcXCIpO1xcclxcbi8vICAgICB9XFxyXFxuXFxyXFxuLy8gICAgIHNldE1vZGFsSW1hZ2VzKGVsZW1lbnQpIHtcXHJcXG4vLyAgICAgICAgIHRoaXMuI21vZGFsSW1hZ2VzID0gW1xcclxcbi8vICAgICAgICAgICAgIC4uLmVsZW1lbnQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFxcXCIubW9kYWwtaW1nXFxcIiksXFxyXFxuLy8gICAgICAgICBdO1xcclxcbi8vICAgICB9XFxyXFxuXFxyXFxuLy8gICAgIHNldEltYWdlTmFtZShlbGVtZW50KSB7XFxyXFxuLy8gICAgICAgICB0aGlzLiNpbWFnZU5hbWUgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcihcXFwiLmltYWdlLW5hbWVcXFwiKTtcXHJcXG4vLyAgICAgfVxcclxcblxcclxcbi8vICAgICBzZXRDbG9zZUJ0bigpIHtcXHJcXG4vLyAgICAgICAgIGlmICh0aGlzLiNtb2RhbCkge1xcclxcbi8vICAgICAgICAgICAgIHRoaXMuI2Nsb3NlQnRuID0gdGhpcy4jbW9kYWwucXVlcnlTZWxlY3RvcihcXFwiLmNsb3NlLWJ0blxcXCIpO1xcclxcbi8vICAgICAgICAgfVxcclxcbi8vICAgICB9XFxyXFxuXFxyXFxuLy8gICAgIHNldE5leHRCdG4oKSB7XFxyXFxuLy8gICAgICAgICB0aGlzLiNuZXh0QnRuID0gdGhpcy4jbW9kYWwucXVlcnlTZWxlY3RvcihcXFwiLm5leHQtYnRuXFxcIik7XFxyXFxuLy8gICAgIH1cXHJcXG5cXHJcXG4vLyAgICAgc2V0UHJldkJ0bigpIHtcXHJcXG4vLyAgICAgICAgIHRoaXMuI3ByZXZCdG4gPSB0aGlzLiNtb2RhbC5xdWVyeVNlbGVjdG9yKFxcXCIucHJldi1idG5cXFwiKTtcXHJcXG4vLyAgICAgfVxcclxcblxcclxcbi8vICAgICBpbml0UHJvcHMoKSB7XFxyXFxuLy8gICAgICAgICB0aGlzLnNldEltYWdlcyh0aGlzLiNlbGVtZW50KTtcXHJcXG4vLyAgICAgICAgIHRoaXMuc2V0TW9kYWwodGhpcy4jZWxlbWVudCk7XFxyXFxuLy8gICAgICAgICB0aGlzLnNldE1vZGFsSW1nKHRoaXMuI2VsZW1lbnQpO1xcclxcbi8vICAgICAgICAgdGhpcy5zZXRNb2RhbEltYWdlcyh0aGlzLiNlbGVtZW50KTtcXHJcXG4vLyAgICAgICAgIHRoaXMuc2V0SW1hZ2VOYW1lKHRoaXMuI2VsZW1lbnQpO1xcclxcbi8vICAgICAgICAgdGhpcy5zZXRDbG9zZUJ0bigpO1xcclxcbi8vICAgICAgICAgdGhpcy5zZXROZXh0QnRuKCk7XFxyXFxuLy8gICAgICAgICB0aGlzLnNldFByZXZCdG4oKTtcXHJcXG4vLyAgICAgfVxcclxcblxcclxcbi8vICAgICBvcGVuTW9kYWwoKSB7XFxyXFxuLy8gICAgICAgICB0aGlzLiNlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXFxcImNsaWNrXFxcIiwgKGUpID0+IHtcXHJcXG4vLyAgICAgICAgICAgICB0aGlzLiNtb2RhbC5jbGFzc0xpc3QuYWRkKFxcXCJvcGVuXFxcIik7XFxyXFxuLy8gICAgICAgICAgICAgdGhpcy5zZXRPcGVuTW9kYWxJbWFnZXMoZS50YXJnZXQpO1xcclxcbi8vICAgICAgICAgfSk7XFxyXFxuLy8gICAgIH1cXHJcXG5cXHJcXG4vLyAgICAgY2xvc2VNb2RhbCgpIHtcXHJcXG4vLyAgICAgICAgIHRoaXMuI21vZGFsLmFkZEV2ZW50TGlzdGVuZXIoXFxcImNsaWNrXFxcIiwgKGUpID0+IHtcXHJcXG4vLyAgICAgICAgICAgICBpZiAoXFxyXFxuLy8gICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC52YWx1ZSA9PT0gXFxcInNlY3Rpb24tZ2FsbGVyeV9fbW9kYWwgb3BlblxcXCIgfHxcXHJcXG4vLyAgICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFxcXCJmYS10aW1lc1xcXCIpXFxyXFxuLy8gICAgICAgICAgICAgKSB7XFxyXFxuLy8gICAgICAgICAgICAgICAgIHRoaXMuI21vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXFxcIm9wZW5cXFwiKTtcXHJcXG4vLyAgICAgICAgICAgICB9XFxyXFxuLy8gICAgICAgICB9KTtcXHJcXG4vLyAgICAgfVxcclxcblxcclxcbi8vICAgICBzZXRPcGVuTW9kYWxJbWFnZXMobWFpbkltYWdlKSB7XFxyXFxuLy8gICAgICAgICAvLyBtYWluSW1hZ2UgaXMgZS50YXJnZXQgZnJvbSBjbGlja1xcclxcbi8vICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSB0aGlzLmdldEFwcHJvcHJpYXRlQ2F0ZWdvcnkobWFpbkltYWdlKTtcXHJcXG4vLyAgICAgICAgIHRoaXMucmVuZGVyTW9kYWxIVE1MKG1haW5JbWFnZSwgY2F0ZWdvcnkpO1xcclxcbi8vICAgICB9XFxyXFxuXFxyXFxuLy8gICAgIGdldEFwcHJvcHJpYXRlQ2F0ZWdvcnkobWFpbkltYWdlKSB7XFxyXFxuLy8gICAgICAgICBpZiAoIW1haW5JbWFnZS5kYXRhc2V0Lm5hbWUpIHtcXHJcXG4vLyAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxcclxcbi8vICAgICAgICAgICAgICAgICBcXFwic29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCBnZXR0aW5nIGNhdGVnb3J5IGZvciBpbWFnZVxcXCJcXHJcXG4vLyAgICAgICAgICAgICApO1xcclxcbi8vICAgICAgICAgICAgIHJldHVybjtcXHJcXG4vLyAgICAgICAgIH1cXHJcXG4vLyAgICAgICAgIGNvbnN0IGNhdGVnb3J5TmFtZSA9IG1haW5JbWFnZS5kYXRhc2V0Lm5hbWU7XFxyXFxuLy8gICAgICAgICBjb25zdCBhcHByb3BhcmlhdGVDYXRlZ29yeSA9IHNsaWtlLmZpbmQoKHgpID0+IHguaW1lID09PSBjYXRlZ29yeU5hbWUpO1xcclxcbi8vICAgICAgICAgcmV0dXJuIGFwcHJvcGFyaWF0ZUNhdGVnb3J5O1xcclxcbi8vICAgICB9XFxyXFxuXFxyXFxuLy8gICAgIHJlbmRlck1vZGFsSFRNTChtYWluSW1hZ2UsIGNhdGVnb3J5KSB7XFxyXFxuLy8gICAgICAgICBsZXQgbWFpbkl0ZW0gPSBtYWluSW1hZ2U7XFxyXFxuLy8gICAgICAgICBsZXQgaWQgPSArbWFpbkl0ZW0uZGF0YXNldC5pZDtcXHJcXG4vLyAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gY2F0ZWdvcnkuaW1hZ2VzLmZpbmQoKHgpID0+IHguaWQgPT09IGlkKTtcXHJcXG4vLyAgICAgICAgIHRoaXMuI21vZGFsLmlubmVySFRNTCA9IGBcXHJcXG4vLyAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImNsb3NlLWJ0blxcXCI+XFxyXFxuLy8gICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhcyBmYS10aW1lc1xcXCI+PC9pPlxcclxcbi8vICAgICAgICAgPC9idXR0b24+XFxyXFxuLy8gICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZWN0aW9uLWdhbGxlcnlfX21vZGFsLS1jb250ZW50XFxcIj5cXHJcXG4vLyAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJwcmV2LWJ0blxcXCI+XFxyXFxuLy8gICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYXMgZmEtY2hldnJvbi1sZWZ0XFxcIj48L2k+XFxyXFxuLy8gICAgICAgICAgICAgPC9idXR0b24+XFxyXFxuLy8gICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwibmV4dC1idG5cXFwiPlxcclxcbi8vICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmFzIGZhLWNoZXZyb24tcmlnaHRcXFwiPjwvaT5cXHJcXG4vLyAgICAgICAgICAgICA8L2J1dHRvbj5cXHJcXG4vLyAgICAgICAgICAgICA8aW1nIHNyYz1cXFwiJHtzZWxlY3RlZC5zcmN9XFxcIiBhbHQ9XFxcImNhdFxcXCIgZGF0YS1uYW1lPSR7XFxyXFxuLy8gICAgICAgICAgICAgY2F0ZWdvcnkuaW1lXFxyXFxuLy8gICAgICAgICB9IGRhdGEtaWQ9XFxcIiR7c2VsZWN0ZWQuaWR9XFxcIiBjbGFzcz1cXFwibWFpbi1pbWdcXFwiPlxcclxcbi8vICAgICAgICAgICAgIDxwIGNsYXNzPVxcXCJpbWFnZS1uYW1lXFxcIj4ke3NlbGVjdGVkLmRlc2NyaXB0aW9ufTwvcD5cXHJcXG4vLyAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1pbWFnZXMgZy0xXFxcIj5cXHJcXG4vLyAgICAgICAgICAgICAgICAgJHtjYXRlZ29yeS5pbWFnZXNcXHJcXG4vLyAgICAgICAgICAgICAgICAgICAgIC5tYXAoXFxyXFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgKGVsKSA9Plxcclxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgPGltZyBzcmM9XFxcIiR7ZWwuc3JjfVxcXCIgYWx0PVxcXCJjYXRcXFwiIGRhdGEtaWQ9JHtcXHJcXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlkXFxyXFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZGF0YS1uYW1lPSR7Y2F0ZWdvcnkuaW1lfSBjbGFzcz1cXFwibW9kYWwtaW1nICR7XFxyXFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pZCA9PT0gc2VsZWN0ZWQuaWQgPyBcXFwic2VsZWN0ZWRcXFwiIDogXFxcIlxcXCJcXHJcXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXCI+YFxcclxcbi8vICAgICAgICAgICAgICAgICAgICAgKVxcclxcbi8vICAgICAgICAgICAgICAgICAgICAgLmpvaW4oXFxcIlxcXCIpfVxcclxcbi8vICAgICAgICAgICAgIDwvZGl2Plxcclxcbi8vICAgICAgICAgPC9kaXY+XFxyXFxuLy8gICAgICAgICBgO1xcclxcbi8vICAgICB9XFxyXFxuLy8gfVxcclxcblxcclxcbi8vIHtcXHJcXG4vLyAgICAgLyogPGltZyBzcmM9XFxcIi4vaW1nL2dhbGxlcnlwaG90b3MvY2F0LTEuanBnXFxcIiBhbHQ9XFxcImNhdFxcXCIgY2xhc3M9XFxcIm1vZGFsLWltZyBzZWxlY3RlZFxcXCI+XFxyXFxuLy8gICAgICAgICAgICAgICAgIDxpbWcgc3JjPVxcXCIuL2ltZy9nYWxsZXJ5cGhvdG9zL2NhdC0yLmpwZ1xcXCIgYWx0PVxcXCJjYXRcXFwiIGNsYXNzPVxcXCJtb2RhbC1pbWdcXFwiPlxcclxcbi8vICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cXFwiLi9pbWcvZ2FsbGVyeXBob3Rvcy9jYXQtMy5qcGdcXFwiIGFsdD1cXFwiY2F0XFxcIiBjbGFzcz1cXFwibW9kYWwtaW1nXFxcIj48L2ltZz4gKi9cXHJcXG4vLyB9XFxyXFxuXFxyXFxuLy8gZnVuY3Rpb24gc2V0RWxlbWVudChzZWxlY3Rpb24pIHtcXHJcXG4vLyAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0aW9uKTtcXHJcXG4vLyAgICAgaWYgKGVsZW1lbnQpIHtcXHJcXG4vLyAgICAgICAgIHJldHVybiBlbGVtZW50O1xcclxcbi8vICAgICB9XFxyXFxuLy8gICAgIHRocm93IG5ldyBFcnJvcihcXHJcXG4vLyAgICAgICAgIGBQbGVhc2UgY2hlY2sgXFxcIiR7c2VsZWN0aW9ufVxcXCIgc2VsZWN0b3IsIG5vIHN1Y2ggZWxlbWVudCBleGlzdHNgXFxyXFxuLy8gICAgICk7XFxyXFxuLy8gfVxcclxcblxcclxcbi8vIGNvbnN0IGthcGlqZSA9IG5ldyBHYWxsZXJ5KHNldEVsZW1lbnQoXFxcIi5rYXBpamVcXFwiKSk7XFxyXFxuLy8gY29uc3Qgb2dyYWRlID0gbmV3IEdhbGxlcnkoc2V0RWxlbWVudChcXFwiLm9ncmFkZVxcXCIpKTtcXHJcXG5cXG5cXG4vLyMgc291cmNlVVJMPXdlYnBhY2s6Ly9ndWxwc3RhcnRlci8uL3NyYy9qcy9nYWxsZXJ5LmpzP1wiKTtcbiAgICAgIC8qKiovXG4gICAgfSxcblxuICAgIC8qKiovXG4gICAgXCIuL3NyYy9qcy9tYWluLmpzXCI6XG4gICAgLyohKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAgICAgISoqKiAuL3NyYy9qcy9tYWluLmpzICoqKiFcbiAgICAgIFxcKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgLyoqKi9cbiAgICBmdW5jdGlvbiBzcmNKc01haW5KcyhfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAgIGV2YWwoXCJfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF90ZXN0aW1vbmlhbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdGVzdGltb25pYWxzLmpzICovIFxcXCIuL3NyYy9qcy90ZXN0aW1vbmlhbHMuanNcXFwiKTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2FjY29yZGlvbl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9hY2NvcmRpb24uanMgKi8gXFxcIi4vc3JjL2pzL2FjY29yZGlvbi5qc1xcXCIpO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYWNjb3JkaW9uX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2FjY29yZGlvbl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2dhbGxlcnlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vZ2FsbGVyeS5qcyAqLyBcXFwiLi9zcmMvanMvZ2FsbGVyeS5qc1xcXCIpO1xcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZ2FsbGVyeV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9nYWxsZXJ5X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18pO1xcblxcclxcblxcclxcblxcclxcblxcclxcbmNvbnN0IHRvZ2dsZXJCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxcXCIubWFpbi1uYXYtLXRvZ2dsZXJcXFwiKTtcXHJcXG5jb25zdCBsaW5rc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXFxcIi5tYWluLW5hdl9fbGlua3MtY29udGFpbmVyXFxcIik7XFxyXFxuY29uc3QgaGFtYnVyZ2VyTGluZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxcXCIubWFpbi1uYXYtLXRvZ2dsZXItbGluZVxcXCIpO1xcclxcblxcclxcbnRvZ2dsZXJCdG4uYWRkRXZlbnRMaXN0ZW5lcihcXFwiY2xpY2tcXFwiLCAoZSkgPT4ge1xcclxcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XFxyXFxuICAgIGhhbWJ1cmdlckxpbmVzLmZvckVhY2goKGVsKSA9PiBlbC5jbGFzc0xpc3QudG9nZ2xlKFxcXCJhY3RpdmVcXFwiKSk7XFxyXFxuICAgIGxpbmtzQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoXFxcImFjdGl2ZVxcXCIpO1xcclxcbn0pO1xcclxcblxcclxcbmxpbmtzQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXFxcImNsaWNrXFxcIiwgKGUpID0+IHtcXHJcXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xcclxcbiAgICBpZiAoWy4uLmhhbWJ1cmdlckxpbmVzXS5zb21lKChlbCkgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKFxcXCJhY3RpdmVcXFwiKSkpIHtcXHJcXG4gICAgICAgIGhhbWJ1cmdlckxpbmVzLmZvckVhY2goKGVsKSA9PiBlbC5jbGFzc0xpc3QucmVtb3ZlKFxcXCJhY3RpdmVcXFwiKSk7XFxyXFxuICAgICAgICBsaW5rc0NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFxcXCJhY3RpdmVcXFwiKTtcXHJcXG4gICAgfVxcclxcbn0pO1xcclxcblxcclxcbi8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXFxcIkRPTUNvbnRlbnRMb2FkZWRcXFwiLCAoKSA9PiB7XFxyXFxuLy8gICAgIFsuLi5hY2NvcmRpb25Db250ZW50c10uZm9yRWFjaCgoZWwpID0+IGVsLmNsYXNzTGlzdC5hZGQoXFxcImhpZGRlblxcXCIpKTtcXHJcXG4vLyB9KTtcXHJcXG5cXG5cXG4vLyMgc291cmNlVVJMPXdlYnBhY2s6Ly9ndWxwc3RhcnRlci8uL3NyYy9qcy9tYWluLmpzP1wiKTtcbiAgICAgIC8qKiovXG4gICAgfSxcblxuICAgIC8qKiovXG4gICAgXCIuL3NyYy9qcy9yZXZpZXdzLmpzXCI6XG4gICAgLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAgICAgISoqKiAuL3NyYy9qcy9yZXZpZXdzLmpzICoqKiFcbiAgICAgIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgLyoqKi9cbiAgICBmdW5jdGlvbiBzcmNKc1Jldmlld3NKcyhfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAgIGV2YWwoXCJfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFxcXCJyZXZpZXdzXFxcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gcmV2aWV3cylcXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcXG5jb25zdCByZXZpZXdzID0gW1xcclxcbiAgICB7XFxyXFxuICAgICAgICBpZDogMSxcXHJcXG4gICAgICAgIG5hbWU6IFxcXCJDYXQgT25lXFxcIixcXHJcXG4gICAgICAgIGpvYjogXFxcIlVYXFxcIixcXHJcXG4gICAgICAgIGltZzogXFxcImltZy9jYXQtMS5qcGdcXFwiLFxcclxcbiAgICAgICAgdGV4dDogXFxcIk9kbGnEjWFuIHBvc2FvIG5hIG5hxaFvaiBrdcSHaSB1IFZpbmnFocSHdSwgaXp1emV0bm8gc21vIHphZG92b2xqbmkga3ZhbGl0ZXRvbSBpIHJhZG9tLlxcXCIsXFxyXFxuICAgIH0sXFxyXFxuICAgIHtcXHJcXG4gICAgICAgIGlkOiAyLFxcclxcbiAgICAgICAgbmFtZTogXFxcIkNhdCBUd29cXFwiLFxcclxcbiAgICAgICAgam9iOiBcXFwiR3JhcGhpY3NcXFwiLFxcclxcbiAgICAgICAgaW1nOiBcXFwiaW1nL2NhdC0yLmpwZ1xcXCIsXFxyXFxuICAgICAgICB0ZXh0OiBcXFwiVGhpcyBpcyBzb21lIHJhbmRvbSB0ZXh0XFxcIixcXHJcXG4gICAgfSxcXHJcXG4gICAge1xcclxcbiAgICAgICAgaWQ6IDMsXFxyXFxuICAgICAgICBuYW1lOiBcXFwiQ2F0IE9uZVxcXCIsXFxyXFxuICAgICAgICBqb2I6IFxcXCJUZXN0ZXJcXFwiLFxcclxcbiAgICAgICAgaW1nOiBcXFwiaW1nL2NhdC0zLmpwZ1xcXCIsXFxyXFxuICAgICAgICB0ZXh0OiBcXFwiVGhpcyBpcyBzb21lIHJhbmRvbSB0ZXh0XFxcIixcXHJcXG4gICAgfSxcXHJcXG5dO1xcclxcblxcblxcbi8vIyBzb3VyY2VVUkw9d2VicGFjazovL2d1bHBzdGFydGVyLy4vc3JjL2pzL3Jldmlld3MuanM/XCIpO1xuICAgICAgLyoqKi9cbiAgICB9LFxuXG4gICAgLyoqKi9cbiAgICBcIi4vc3JjL2pzL3Rlc3RpbW9uaWFscy5qc1wiOlxuICAgIC8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAgICAgISoqKiAuL3NyYy9qcy90ZXN0aW1vbmlhbHMuanMgKioqIVxuICAgICAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIC8qKiovXG4gICAgZnVuY3Rpb24gc3JjSnNUZXN0aW1vbmlhbHNKcyhfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAgIGV2YWwoXCJfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9yZXZpZXdzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3Jldmlld3MuanMgKi8gXFxcIi4vc3JjL2pzL3Jldmlld3MuanNcXFwiKTtcXG5cXHJcXG5cXHJcXG5jb25zdCB0ZXN0aW1vbmlhbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXFxcIi50ZXN0aW1vbmlhbHNcXFwiKTtcXHJcXG5jb25zdCB0ZXN0aW1vbmlhbEltZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXFxcIi50ZXN0aW1vbmlhbHNfX2ltZ1xcXCIpO1xcclxcbmNvbnN0IHRlc3RpbW9uaWFsVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxcXCIudGVzdGltb25pYWxzX190aXRsZVxcXCIpO1xcclxcbmNvbnN0IHRlc3RpbW9uaWFsSm9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcXFwiLnRlc3RpbW9uaWFsc19fam9iXFxcIik7XFxyXFxuY29uc3QgdGVzdGltb25pYWxJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcXFwiLnRlc3RpbW9uaWFsc19faW5mb1xcXCIpO1xcclxcbmNvbnN0IGJ0blRlc3RpbW9uaWFsTGVmdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXFxyXFxuICAgIFxcXCIudGVzdGltb25pYWxzX19idXR0b24tLWxlZnRcXFwiXFxyXFxuKTtcXHJcXG5jb25zdCBidG5UZXN0aW1vbmlhbFJpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcXHJcXG4gICAgXFxcIi50ZXN0aW1vbmlhbHNfX2J1dHRvbi0tcmlnaHRcXFwiXFxyXFxuKTtcXHJcXG5cXHJcXG4vLyBTdGF0ZVxcclxcbmxldCBjdXJyZW50TnVtYmVyID0gMDtcXHJcXG5jb25zdCBpbnRlcnZhbFRpbWluZyA9IDIyNTA7XFxyXFxubGV0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gaW50ZXJ2YWxTZXR1cCgpLCBpbnRlcnZhbFRpbWluZyk7XFxyXFxuXFxyXFxuLy8gRXZlbnQgTGlzdGVuZXJzXFxyXFxudGVzdGltb25pYWxDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcXFwibW91c2VvdmVyXFxcIiwgKCkgPT4ge1xcclxcbiAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcXHJcXG59KTtcXHJcXG5cXHJcXG50ZXN0aW1vbmlhbENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFxcXCJtb3VzZW91dFxcXCIsICgpID0+IHtcXHJcXG4gICAgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiBpbnRlcnZhbFNldHVwKCksIGludGVydmFsVGltaW5nKTtcXHJcXG59KTtcXHJcXG5cXHJcXG5idG5UZXN0aW1vbmlhbExlZnQuYWRkRXZlbnRMaXN0ZW5lcihcXFwiY2xpY2tcXFwiLCAoZSkgPT4ge1xcclxcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XFxyXFxuICAgIGN1cnJlbnROdW1iZXItLTtcXHJcXG4gICAgbW92ZUl0ZW0oKTtcXHJcXG59KTtcXHJcXG5cXHJcXG5idG5UZXN0aW1vbmlhbFJpZ2h0LmFkZEV2ZW50TGlzdGVuZXIoXFxcImNsaWNrXFxcIiwgKGUpID0+IHtcXHJcXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xcclxcbiAgICBjdXJyZW50TnVtYmVyKys7XFxyXFxuICAgIG1vdmVJdGVtKCk7XFxyXFxufSk7XFxyXFxuXFxyXFxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXFxcIkRPTUNvbnRlbnRMb2FkZWRcXFwiLCAoKSA9PiB7XFxyXFxuICAgIGNvbnN0IGl0ZW0gPSBfcmV2aWV3c19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnJldmlld3NbY3VycmVudE51bWJlcl07XFxyXFxuICAgIHNldFByb3BlcnRpZXMoaXRlbSk7XFxyXFxufSk7XFxyXFxuXFxyXFxuLy8gTG9naWMgLSBGdW5jdGlvbnNcXHJcXG5mdW5jdGlvbiBhZGp1c3ROdW1iZXIobnVtKSB7XFxyXFxuICAgIGlmIChudW0gPCAwKSB7XFxyXFxuICAgICAgICBjdXJyZW50TnVtYmVyID0gX3Jldmlld3NfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5yZXZpZXdzLmxlbmd0aCAtIDE7XFxyXFxuICAgICAgICByZXR1cm4gY3VycmVudE51bWJlcjtcXHJcXG4gICAgfVxcclxcbiAgICBpZiAobnVtID4gX3Jldmlld3NfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5yZXZpZXdzLmxlbmd0aCAtIDEpIHtcXHJcXG4gICAgICAgIGN1cnJlbnROdW1iZXIgPSAwO1xcclxcbiAgICAgICAgcmV0dXJuIGN1cnJlbnROdW1iZXI7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuZnVuY3Rpb24gaW50ZXJ2YWxTZXR1cCgpIHtcXHJcXG4gICAgY3VycmVudE51bWJlcisrO1xcclxcbiAgICBtb3ZlSXRlbSgpO1xcclxcbn1cXHJcXG5cXHJcXG5mdW5jdGlvbiBtb3ZlSXRlbSgpIHtcXHJcXG4gICAgaWYgKGlzVmFsaWROdW1iZXIoY3VycmVudE51bWJlcikpIHtcXHJcXG4gICAgICAgIHNldFByb3BlcnRpZXMoX3Jldmlld3NfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5yZXZpZXdzW2N1cnJlbnROdW1iZXJdKTtcXHJcXG4gICAgICAgIHJldHVybjtcXHJcXG4gICAgfVxcclxcbiAgICBhZGp1c3ROdW1iZXIoY3VycmVudE51bWJlcik7XFxyXFxuICAgIHNldFByb3BlcnRpZXMoX3Jldmlld3NfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5yZXZpZXdzW2N1cnJlbnROdW1iZXJdKTtcXHJcXG59XFxyXFxuXFxyXFxuZnVuY3Rpb24gaXNWYWxpZE51bWJlcihudW0pIHtcXHJcXG4gICAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZShudW0pICYmIG51bSA+PSAwICYmIG51bSA8IF9yZXZpZXdzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ucmV2aWV3cy5sZW5ndGg7XFxyXFxufVxcclxcblxcclxcbmZ1bmN0aW9uIHNldFByb3BlcnRpZXMoaXRlbSkge1xcclxcbiAgICB0ZXN0aW1vbmlhbEltZy5zcmMgPSBpdGVtLmltZztcXHJcXG4gICAgdGVzdGltb25pYWxUaXRsZS50ZXh0Q29udGVudCA9IGl0ZW0ubmFtZTtcXHJcXG4gICAgdGVzdGltb25pYWxKb2IudGV4dENvbnRlbnQgPSBpdGVtLmpvYjtcXHJcXG4gICAgdGVzdGltb25pYWxJbmZvLnRleHRDb250ZW50ID0gaXRlbS50ZXh0O1xcclxcbn1cXHJcXG5cXG5cXG4vLyMgc291cmNlVVJMPXdlYnBhY2s6Ly9ndWxwc3RhcnRlci8uL3NyYy9qcy90ZXN0aW1vbmlhbHMuanM/XCIpO1xuICAgICAgLyoqKi9cbiAgICB9XG4gICAgLyoqKioqKi9cblxuICB9O1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKioqKiovXG4gIC8vIFRoZSBtb2R1bGUgY2FjaGVcblxuICAvKioqKioqL1xuXG4gIHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbiAgLyoqKioqKi9cblxuICAvKioqKioqL1xuICAvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuXG4gIC8qKioqKiovXG5cbiAgZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuICAgIC8qKioqKiovXG4gICAgLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cbiAgICAvKioqKioqL1xuICAgIHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuICAgIC8qKioqKiovXG5cbiAgICBpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8qKioqKiovXG4gICAgICByZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4gICAgICAvKioqKioqL1xuICAgIH1cbiAgICAvKioqKioqL1xuICAgIC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cbiAgICAvKioqKioqL1xuXG5cbiAgICB2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcbiAgICAgIC8qKioqKiovXG4gICAgICAvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cbiAgICAgIC8qKioqKiovXG4gICAgICAvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXG4gICAgICAvKioqKioqL1xuICAgICAgZXhwb3J0czoge31cbiAgICAgIC8qKioqKiovXG5cbiAgICB9O1xuICAgIC8qKioqKiovXG5cbiAgICAvKioqKioqL1xuICAgIC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXG4gICAgLyoqKioqKi9cblxuICAgIF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuICAgIC8qKioqKiovXG5cbiAgICAvKioqKioqL1xuICAgIC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cbiAgICAvKioqKioqL1xuXG5cbiAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gICAgLyoqKioqKi9cbiAgfVxuICAvKioqKioqL1xuXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqKioqKi9cblxuICAvKiB3ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCAqL1xuXG4gIC8qKioqKiovXG5cblxuICAoZnVuY3Rpb24gKCkge1xuICAgIC8qKioqKiovXG4gICAgLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcblxuICAgIC8qKioqKiovXG4gICAgX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgICAgLyoqKioqKi9cbiAgICAgIHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuICAgICAgLyoqKioqKi9cbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddO1xuICAgICAgfSA6XG4gICAgICAvKioqKioqL1xuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbW9kdWxlO1xuICAgICAgfTtcbiAgICAgIC8qKioqKiovXG5cbiAgICAgIF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHtcbiAgICAgICAgYTogZ2V0dGVyXG4gICAgICB9KTtcbiAgICAgIC8qKioqKiovXG5cblxuICAgICAgcmV0dXJuIGdldHRlcjtcbiAgICAgIC8qKioqKiovXG4gICAgfTtcbiAgICAvKioqKioqL1xuXG4gIH0pKCk7XG4gIC8qKioqKiovXG5cbiAgLyoqKioqKi9cblxuICAvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cblxuICAvKioqKioqL1xuXG5cbiAgKGZ1bmN0aW9uICgpIHtcbiAgICAvKioqKioqL1xuICAgIC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcblxuICAgIC8qKioqKiovXG4gICAgX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24gKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcbiAgICAgIC8qKioqKiovXG4gICAgICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuICAgICAgICAvKioqKioqL1xuICAgICAgICBpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG4gICAgICAgICAgLyoqKioqKi9cbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0OiBkZWZpbml0aW9uW2tleV1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvKioqKioqL1xuICAgICAgICB9XG4gICAgICAgIC8qKioqKiovXG5cbiAgICAgIH1cbiAgICAgIC8qKioqKiovXG5cbiAgICB9O1xuICAgIC8qKioqKiovXG5cbiAgfSkoKTtcbiAgLyoqKioqKi9cblxuICAvKioqKioqL1xuXG4gIC8qIHdlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQgKi9cblxuICAvKioqKioqL1xuXG5cbiAgKGZ1bmN0aW9uICgpIHtcbiAgICAvKioqKioqL1xuICAgIF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uIChvYmosIHByb3ApIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbiAgICB9O1xuICAgIC8qKioqKiovXG5cbiAgfSkoKTtcbiAgLyoqKioqKi9cblxuICAvKioqKioqL1xuXG4gIC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cblxuICAvKioqKioqL1xuXG5cbiAgKGZ1bmN0aW9uICgpIHtcbiAgICAvKioqKioqL1xuICAgIC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcblxuICAgIC8qKioqKiovXG4gICAgX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgICAgIC8qKioqKiovXG4gICAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gICAgICAgIC8qKioqKiovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHtcbiAgICAgICAgICB2YWx1ZTogJ01vZHVsZSdcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKioqKiovXG4gICAgICB9XG4gICAgICAvKioqKioqL1xuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgLyoqKioqKi9cbiAgICB9O1xuICAgIC8qKioqKiovXG5cbiAgfSkoKTtcbiAgLyoqKioqKi9cblxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKioqKiovXG5cbiAgLyoqKioqKi9cbiAgLy8gc3RhcnR1cFxuXG4gIC8qKioqKiovXG4gIC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuXG4gIC8qKioqKiovXG4gIC8vIFRoaXMgZW50cnkgbW9kdWxlIGNhbid0IGJlIGlubGluZWQgYmVjYXVzZSB0aGUgZXZhbCBkZXZ0b29sIGlzIHVzZWQuXG5cbiAgLyoqKioqKi9cblxuXG4gIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2pzL21haW4uanNcIik7XG4gIC8qKioqKiovXG5cbiAgLyoqKioqKi9cblxufSkoKTsiXSwibmFtZXMiOlsiX193ZWJwYWNrX21vZHVsZXNfXyIsIi4vc3JjL2pzL2FjY29yZGlvbi5qcyIsInNyY0pzQWNjb3JkaW9uSnMiLCJldmFsIiwiLi9zcmMvanMvZ2FsbGVyeS5qcyIsInNyY0pzR2FsbGVyeUpzIiwiLi9zcmMvanMvbWFpbi5qcyIsInNyY0pzTWFpbkpzIiwiX191bnVzZWRfd2VicGFja19tb2R1bGUiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIi4vc3JjL2pzL3Jldmlld3MuanMiLCJzcmNKc1Jldmlld3NKcyIsIi4vc3JjL2pzL3Rlc3RpbW9uaWFscy5qcyIsInNyY0pzVGVzdGltb25pYWxzSnMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiXSwibWFwcGluZ3MiOiJBQUFBLGFBWUEsQ0FBQSxXQUlFLElBQUlBLG9CQUFzQixDQUV4QkMsd0JBTUEsU0FBU0MsbUJBQ1BDLEtBQUssMndDQUF1eUMsQ0FFOXlDLEVBR0FDLHNCQU1BLFNBQVNDLGlCQUNQRixLQUFLLHVtTEFBcXNMLENBRTVzTCxFQUdBRyxtQkFNQSxTQUFTQyxZQUFZQyx3QkFBeUJDLG9CQUFxQkMscUJBR2pFUCxLQUFLLHF0REFBbXZELENBRTF2RCxFQUdBUSxzQkFNQSxTQUFTQyxlQUFlSix3QkFBeUJDLG9CQUFxQkMscUJBR3BFUCxLQUFLLHUxQkFBaTNCLENBRXgzQixFQUdBVSwyQkFNQSxTQUFTQyxvQkFBb0JOLHdCQUF5QkMsb0JBQXFCQyxxQkFHekVQLEtBQUssa3hGQUE0eUYsQ0FFbnpGLENBR0YsRUFRSVkseUJBQTJCLEdBUS9CLFNBQVNMLG9CQUFvQk0sR0FLM0IsSUFBSUMsRUFBZUYseUJBQXlCQyxHQUc1QyxPQUFxQkUsS0FBQUEsSUFBakJELElBV0FFLEVBQVNKLHlCQUF5QkMsR0FBWSxDQVFoREksUUFBUyxFQUdYLEVBUUFwQixvQkFBb0JnQixHQUFVRyxFQUFRQSxFQUFPQyxRQUFTVixtQkFBbUIsR0E1QmhFTyxFQUFhRyxPQXVDeEIsQ0FpQkVWLG9CQUFvQlcsRUFBSSxTQUFVRixHQUVoQyxJQUFJRyxFQUFTSCxHQUFVQSxFQUFPSSxXQUU5QixXQUNFLE9BQU9KLEVBQWdCLE9BQ3pCLEVBRUEsV0FDRSxPQUFPQSxDQUNULEVBU0EsT0FOQVQsb0JBQW9CYyxFQUFFRixFQUFRLENBQzVCRyxFQUFHSCxDQUNMLENBQUMsRUFJTUEsQ0FFVCxFQWtCQVosb0JBQW9CYyxFQUFJLFNBQVVKLEVBQVNNLEdBRXpDLElBQUssSUFBSUMsS0FBT0QsRUFFVmhCLG9CQUFvQmtCLEVBQUVGLEVBQVlDLENBQUcsR0FBSyxDQUFDakIsb0JBQW9Ca0IsRUFBRVIsRUFBU08sQ0FBRyxHQUUvRUUsT0FBT0MsZUFBZVYsRUFBU08sRUFBSyxDQUNsQ0ksV0FBWSxDQUFBLEVBQ1pDLElBQUtOLEVBQVdDLEVBQ2xCLENBQUMsQ0FRUCxFQWVBakIsb0JBQW9Ca0IsRUFBSSxTQUFVSyxFQUFLQyxHQUNyQyxPQUFPTCxPQUFPTSxVQUFVQyxlQUFlQyxLQUFLSixFQUFLQyxDQUFJLENBQ3ZELEVBa0JBeEIsb0JBQW9CNEIsRUFBSSxTQUFVbEIsR0FFVixhQUFsQixPQUFPbUIsUUFBMEJBLE9BQU9DLGFBRTFDWCxPQUFPQyxlQUFlVixFQUFTbUIsT0FBT0MsWUFBYSxDQUNqREMsTUFBTyxRQUNULENBQUMsRUFNSFosT0FBT0MsZUFBZVYsRUFBUyxhQUFjLENBQzNDcUIsTUFBTyxDQUFBLENBQ1QsQ0FBQyxDQUVILEVBc0JGLElBQUloQyxvQkFBc0JDLG9CQUFvQixrQkFBa0IsQ0FLakUsRUFBRSJ9
