"use strict";!function(){var __webpack_modules__={"./src/js/accordion.js":function srcJsAccordionJs(){eval('const accordions = document.querySelectorAll(".accordion");\r\nconst accordionContents = document.querySelectorAll(".accordion-content");\r\n\r\naccordions.forEach((acc) =>\r\n    acc.addEventListener("click", (e) => {\r\n        handleAccordions(acc, e);\r\n    })\r\n);\r\n\r\nfunction handleAccordions(accordion, event) {\r\n    if (!event.target.classList.contains("accordion-heading--icon")) return;\r\n\r\n    event.target.textContent.trim() === "+"\r\n        ? (event.target.textContent = "-")\r\n        : (event.target.textContent = "+");\r\n\r\n    if (\r\n        accordion.firstElementChild.nextElementSibling.classList.contains(\r\n            "hidden"\r\n        )\r\n    ) {\r\n        accordion.firstElementChild.nextElementSibling.classList.remove(\r\n            "hidden"\r\n        );\r\n        accordion.firstElementChild.nextElementSibling.classList.add("show");\r\n    } else {\r\n        accordion.firstElementChild.nextElementSibling.classList.remove("show");\r\n        accordion.firstElementChild.nextElementSibling.classList.add("hidden");\r\n    }\r\n}\r\n\r\nwindow.addEventListener("DOMContentLoaded", () => {\r\n    [...accordionContents].forEach((el) => el.classList.add("hidden"));\r\n});\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/accordion.js?')},"./src/js/gallery.js":function srcJsGalleryJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_kategorije_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../js/kategorije/data.js */ "./src/js/kategorije/data.js");\n\r\n\r\nclass Gallery {\r\n    #element = null;\r\n    #list = [];\r\n    #modal = null;\r\n    #modalImg = null;\r\n    #modalImages = [];\r\n    #closeBtn = null;\r\n    #nextBtn = null;\r\n    #prevBtn = null;\r\n    #imageName = null;\r\n\r\n    constructor(element) {\r\n        this.#element = element;\r\n        // console.log(this.#element);\r\n        this.initProps();\r\n        this.openModal();\r\n        this.closeModal();\r\n    }\r\n\r\n    setImages(element) {\r\n        // convert nodeList to Arr\r\n        this.#list = [...element.querySelectorAll(".gallery-img")];\r\n    }\r\n\r\n    setModal(element) {\r\n        this.#modal = element.parentElement.querySelector(\r\n            ".section-gallery__modal"\r\n        );\r\n    }\r\n\r\n    setModalImg(element) {\r\n        this.#modalImg = element.parentElement.querySelector(".main-img");\r\n    }\r\n\r\n    setModalImages(element) {\r\n        this.#modalImages = [\r\n            ...element.parentElement.querySelectorAll(".modal-img"),\r\n        ];\r\n    }\r\n\r\n    setImageName(element) {\r\n        this.#imageName = element.parentElement.querySelector(".image-name");\r\n    }\r\n\r\n    setCloseBtn() {\r\n        if (this.#modal) {\r\n            this.#closeBtn = this.#modal.querySelector(".close-btn");\r\n        }\r\n    }\r\n\r\n    setNextBtn() {\r\n        this.#nextBtn = this.#modal.querySelector(".next-btn");\r\n    }\r\n\r\n    setPrevBtn() {\r\n        this.#prevBtn = this.#modal.querySelector(".prev-btn");\r\n    }\r\n\r\n    initProps() {\r\n        this.setImages(this.#element);\r\n        this.setModal(this.#element);\r\n        this.setModalImg(this.#element);\r\n        this.setModalImages(this.#element);\r\n        this.setImageName(this.#element);\r\n        this.setCloseBtn();\r\n        this.setNextBtn();\r\n        this.setPrevBtn();\r\n    }\r\n\r\n    openModal() {\r\n        this.#element.addEventListener("click", (e) => {\r\n            this.#modal.classList.add("open");\r\n            this.setOpenModalImages(e.target);\r\n        });\r\n    }\r\n\r\n    closeModal() {\r\n        this.#modal.addEventListener("click", (e) => {\r\n            if (\r\n                e.target.classList.value === "section-gallery__modal open" ||\r\n                e.target.classList.contains("fa-times")\r\n            ) {\r\n                this.#modal.classList.remove("open");\r\n            }\r\n        });\r\n    }\r\n\r\n    setOpenModalImages(mainImage) {\r\n        // mainImage is e.target from click\r\n        const category = this.getAppropriateCategory(mainImage);\r\n        this.renderModalHTML(mainImage, category);\r\n    }\r\n\r\n    getAppropriateCategory(mainImage) {\r\n        if (!mainImage.dataset.name) {\r\n            console.error(\r\n                "something went wrong with getting category for image"\r\n            );\r\n            return;\r\n        }\r\n        const categoryName = mainImage.dataset.name;\r\n        const appropariateCategory = _js_kategorije_data_js__WEBPACK_IMPORTED_MODULE_0__.slike.find((x) => x.ime === categoryName);\r\n        return appropariateCategory;\r\n    }\r\n\r\n    renderModalHTML(mainImage, category) {\r\n        let mainItem = mainImage;\r\n        let id = +mainItem.dataset.id;\r\n        const selected = category.images.find((x) => x.id === id);\r\n        this.#modal.innerHTML = `\r\n        <button class="close-btn">\r\n            <i class="fas fa-times"></i>\r\n        </button>\r\n        <div class="section-gallery__modal--content">\r\n            <button class="prev-btn">\r\n                <i class="fas fa-chevron-left"></i>\r\n            </button>\r\n            <button class="next-btn">\r\n                <i class="fas fa-chevron-right"></i>\r\n            </button>\r\n            <img src="${selected.src}" alt="cat" data-name=${\r\n            category.ime\r\n        } data-id="${selected.id}" class="main-img">\r\n            <p class="image-name">${selected.description}</p>\r\n            <div class="modal-images g-1">\r\n                ${category.images\r\n                    .map(\r\n                        (el) =>\r\n                            `<img src="${el.src}" alt="cat" data-id=${\r\n                                el.id\r\n                            } data-name=${category.ime} class="modal-img ${\r\n                                el.id === selected.id ? "selected" : ""\r\n                            }">`\r\n                    )\r\n                    .join("")}\r\n            </div>\r\n        </div>\r\n        `;\r\n    }\r\n}\r\n\r\n{\r\n    /* <img src="./img/galleryphotos/cat-1.jpg" alt="cat" class="modal-img selected">\r\n                <img src="./img/galleryphotos/cat-2.jpg" alt="cat" class="modal-img">\r\n                <img src="./img/galleryphotos/cat-3.jpg" alt="cat" class="modal-img"></img> */\r\n}\r\n\r\nfunction setElement(selection) {\r\n    const element = document.querySelector(selection);\r\n    if (element) {\r\n        return element;\r\n    }\r\n    throw new Error(\r\n        `Please check "${selection}" selector, no such element exists`\r\n    );\r\n}\r\n\r\nconst kapije = new Gallery(setElement(".kapije"));\r\nconst ograde = new Gallery(setElement(".ograde"));\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/gallery.js?')},"./src/js/kategorije/data.js":function srcJsKategorijeDataJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "slike": () => (/* binding */ slike)\n/* harmony export */ });\nconst slike = [\r\n    {\r\n        ime: "kapije",\r\n        images: [\r\n            {\r\n                id: 1,\r\n                description: "ovo je opis",\r\n                src: "./img/gallery/cat-1.jpg",\r\n            },\r\n            {\r\n                id: 2,\r\n                description: "ovo je opis dva",\r\n                src: "./img/gallery/cat-2.jpg",\r\n            },\r\n            {\r\n                id: 3,\r\n                description: "ovo je opis tri",\r\n                src: "./img/gallery/cat-3.jpg",\r\n            },\r\n            {\r\n                id: 4,\r\n                description: "ovo je opis tri",\r\n                src: "./img/gallery/cat-4.jpg",\r\n            },\r\n            {\r\n                id: 5,\r\n                description: "ovo je opis tri",\r\n                src: "./img/gallery/cat-5.jpg",\r\n            },\r\n            {\r\n                id: 6,\r\n                description: "ovo je opis tri",\r\n                src: "./img/gallery/cat-6.jpg",\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        ime: "ograde",\r\n        images: [\r\n            {\r\n                id: 7,\r\n                description: "ovo je opis",\r\n                src: "./img/gallery/cat-7.jpg",\r\n            },\r\n            {\r\n                id: 8,\r\n                description: "ovo je opis dva",\r\n                src: "./img/gallery/cat-8.jpg",\r\n            },\r\n            {\r\n                id: 9,\r\n                description: "ovo je opis tri",\r\n                src: "./img/gallery/cat-9.jpg",\r\n            },\r\n            {\r\n                id: 10,\r\n                description: "ovo je opis tri",\r\n                src: "./img/gallery/cat-10.jpg",\r\n            },\r\n            {\r\n                id: 11,\r\n                description: "ovo je opis tri",\r\n                src: "./img/gallery/cat-11.jpg",\r\n            },\r\n            {\r\n                id: 12,\r\n                description: "ovo je opis tri",\r\n                src: "./img/gallery/cat-12.jpg",\r\n            },\r\n        ],\r\n    },\r\n];\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/kategorije/data.js?')},"./src/js/main.js":function srcJsMainJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _testimonials_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./testimonials.js */ "./src/js/testimonials.js");\n/* harmony import */ var _accordion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accordion.js */ "./src/js/accordion.js");\n/* harmony import */ var _accordion_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_accordion_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _gallery_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gallery.js */ "./src/js/gallery.js");\n\r\n\r\n\r\n\r\nconst togglerBtn = document.querySelector(".main-nav--toggler");\r\nconst linksContainer = document.querySelector(".main-nav__links-container");\r\nconst hamburgerLines = document.querySelectorAll(".main-nav--toggler-line");\r\n\r\ntogglerBtn.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    hamburgerLines.forEach((el) => el.classList.toggle("active"));\r\n    linksContainer.classList.toggle("active");\r\n});\r\n\r\nlinksContainer.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    if ([...hamburgerLines].some((el) => el.classList.contains("active"))) {\r\n        hamburgerLines.forEach((el) => el.classList.remove("active"));\r\n        linksContainer.classList.remove("active");\r\n    }\r\n});\r\n\r\ndocument.addEventListener("DOMContentLoaded", () => {\r\n    [...accordionContents].forEach((el) => el.classList.add("hidden"));\r\n});\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/main.js?')},"./src/js/reviews.js":function srcJsReviewsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "reviews": () => (/* binding */ reviews)\n/* harmony export */ });\nconst reviews = [\r\n    {\r\n        id: 1,\r\n        name: "Cat One",\r\n        job: "UX",\r\n        img: "img/cat-1.jpg",\r\n        text: "Odličan posao na našoj kući u Vinišću, izuzetno smo zadovoljni kvalitetom i radom.",\r\n    },\r\n    {\r\n        id: 2,\r\n        name: "Cat Two",\r\n        job: "Graphics",\r\n        img: "img/cat-2.jpg",\r\n        text: "This is some random text",\r\n    },\r\n    {\r\n        id: 3,\r\n        name: "Cat One",\r\n        job: "Tester",\r\n        img: "img/cat-3.jpg",\r\n        text: "This is some random text",\r\n    },\r\n];\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/reviews.js?')},"./src/js/testimonials.js":function srcJsTestimonialsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _reviews_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reviews.js */ "./src/js/reviews.js");\n\r\n\r\nconst testimonialContainer = document.querySelector(".testimonials");\r\nconst testimonialImg = document.querySelector(".testimonials__img");\r\nconst testimonialTitle = document.querySelector(".testimonials__title");\r\nconst testimonialJob = document.querySelector(".testimonials__job");\r\nconst testimonialInfo = document.querySelector(".testimonials__info");\r\nconst btnTestimonialLeft = document.querySelector(\r\n    ".testimonials__button--left"\r\n);\r\nconst btnTestimonialRight = document.querySelector(\r\n    ".testimonials__button--right"\r\n);\r\n\r\n// State\r\nlet currentNumber = 0;\r\nconst intervalTiming = 2250;\r\nlet interval = setInterval(() => intervalSetup(), intervalTiming);\r\n\r\n// Event Listeners\r\ntestimonialContainer.addEventListener("mouseover", () => {\r\n    clearInterval(interval);\r\n});\r\n\r\ntestimonialContainer.addEventListener("mouseout", () => {\r\n    interval = setInterval(() => intervalSetup(), intervalTiming);\r\n});\r\n\r\nbtnTestimonialLeft.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    currentNumber--;\r\n    moveItem();\r\n});\r\n\r\nbtnTestimonialRight.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    currentNumber++;\r\n    moveItem();\r\n});\r\n\r\nwindow.addEventListener("DOMContentLoaded", () => {\r\n    const item = _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews[currentNumber];\r\n    setProperties(item);\r\n});\r\n\r\n// Logic - Functions\r\nfunction adjustNumber(num) {\r\n    if (num < 0) {\r\n        currentNumber = _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews.length - 1;\r\n        return currentNumber;\r\n    }\r\n    if (num > _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews.length - 1) {\r\n        currentNumber = 0;\r\n        return currentNumber;\r\n    }\r\n}\r\n\r\nfunction intervalSetup() {\r\n    currentNumber++;\r\n    moveItem();\r\n}\r\n\r\nfunction moveItem() {\r\n    if (isValidNumber(currentNumber)) {\r\n        setProperties(_reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews[currentNumber]);\r\n        return;\r\n    }\r\n    adjustNumber(currentNumber);\r\n    setProperties(_reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews[currentNumber]);\r\n}\r\n\r\nfunction isValidNumber(num) {\r\n    return Number.isFinite(num) && num >= 0 && num < _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews.length;\r\n}\r\n\r\nfunction setProperties(item) {\r\n    testimonialImg.src = item.img;\r\n    testimonialTitle.textContent = item.name;\r\n    testimonialJob.textContent = item.job;\r\n    testimonialInfo.textContent = item.text;\r\n}\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/testimonials.js?')}},__webpack_module_cache__={};function __webpack_require__(e){var r=__webpack_module_cache__[e];return void 0!==r||(r=__webpack_module_cache__[e]={exports:{}},__webpack_modules__[e](r,r.exports,__webpack_require__)),r.exports}__webpack_require__.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(r,{a:r}),r},__webpack_require__.d=function(e,r){for(var n in r)__webpack_require__.o(r,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},__webpack_require__.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/js/main.js")}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
