"use strict";!function(){var __webpack_modules__={"./src/js/main.js":function srcJsMainJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _reviews__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reviews */ "./src/js/reviews.js");\n\r\n\r\nconst togglerBtn = document.querySelector(".main-nav--toggler");\r\nconst linksContainer = document.querySelector(".main-nav__links-container");\r\nconst hamburgerLines = document.querySelectorAll(".main-nav--toggler-line");\r\nconst accordions = document.querySelectorAll(".accordion");\r\nconst accordionContents = document.querySelectorAll(".accordion-content");\r\n\r\ntogglerBtn.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    hamburgerLines.forEach((el) => el.classList.toggle("active"));\r\n    linksContainer.classList.toggle("active");\r\n});\r\n\r\nlinksContainer.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    if ([...hamburgerLines].some((el) => el.classList.contains("active"))) {\r\n        hamburgerLines.forEach((el) => el.classList.remove("active"));\r\n        linksContainer.classList.remove("active");\r\n    }\r\n});\r\n\r\naccordions.forEach((acc) =>\r\n    acc.addEventListener("click", (e) => {\r\n        handleAccordions(acc, e);\r\n    })\r\n);\r\n\r\nfunction handleAccordions(accordion, event) {\r\n    if (!event.target.classList.contains("accordion-heading--icon")) return;\r\n\r\n    event.target.textContent.trim() === "+"\r\n        ? (event.target.textContent = "-")\r\n        : (event.target.textContent = "+");\r\n\r\n    if (\r\n        accordion.firstElementChild.nextElementSibling.classList.contains(\r\n            "hidden"\r\n        )\r\n    ) {\r\n        accordion.firstElementChild.nextElementSibling.classList.remove(\r\n            "hidden"\r\n        );\r\n        accordion.firstElementChild.nextElementSibling.classList.add("show");\r\n    } else {\r\n        accordion.firstElementChild.nextElementSibling.classList.remove("show");\r\n        accordion.firstElementChild.nextElementSibling.classList.add("hidden");\r\n    }\r\n}\r\n\r\ndocument.addEventListener("DOMContentLoaded", () => {\r\n    [...accordionContents].forEach((el) => el.classList.add("hidden"));\r\n});\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/main.js?')},"./src/js/reviews.js":function srcJsReviewsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "reviews": () => (/* binding */ reviews)\n/* harmony export */ });\nconst reviews = [\r\n    {\r\n        id: 1,\r\n        name: "Cat One",\r\n        job: "UX",\r\n        img: "img/cat-1.jpg",\r\n        text: "This is some random text",\r\n    },\r\n    {\r\n        id: 2,\r\n        name: "Cat Two",\r\n        job: "Graphics",\r\n        img: "img/cat-2.jpg",\r\n        text: "This is some random text",\r\n    },\r\n    {\r\n        id: 3,\r\n        name: "Cat One",\r\n        job: "Tester",\r\n        img: "img/cat-3.jpg",\r\n        text: "This is some random text",\r\n    },\r\n];\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/reviews.js?')}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];return void 0!==n||(n=__webpack_module_cache__[e]={exports:{}},__webpack_modules__[e](n,n.exports,__webpack_require__)),n.exports}__webpack_require__.d=function(e,n){for(var r in n)__webpack_require__.o(n,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},__webpack_require__.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/js/main.js")}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
