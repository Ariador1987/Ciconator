"use strict";!function(){var __webpack_modules__={"./src/js/accordion.js":function srcJsAccordionJs(){eval('const accordions = document.querySelectorAll(".accordion");\r\nconst accordionContents = document.querySelectorAll(".accordion-content");\r\n\r\naccordions.forEach((acc) =>\r\n    acc.addEventListener("click", (e) => {\r\n        handleAccordions(acc, e);\r\n    })\r\n);\r\n\r\nfunction handleAccordions(accordion, event) {\r\n    if (!event.target.classList.contains("accordion-heading--icon")) return;\r\n\r\n    event.target.textContent.trim() === "+"\r\n        ? (event.target.textContent = "-")\r\n        : (event.target.textContent = "+");\r\n\r\n    if (\r\n        accordion.firstElementChild.nextElementSibling.classList.contains(\r\n            "hidden"\r\n        )\r\n    ) {\r\n        accordion.firstElementChild.nextElementSibling.classList.remove(\r\n            "hidden"\r\n        );\r\n        accordion.firstElementChild.nextElementSibling.classList.add("show");\r\n    } else {\r\n        accordion.firstElementChild.nextElementSibling.classList.remove("show");\r\n        accordion.firstElementChild.nextElementSibling.classList.add("hidden");\r\n    }\r\n}\r\n\r\nwindow.addEventListener("DOMContentLoaded", () => {\r\n    [...accordionContents].forEach((el) => el.classList.add("hidden"));\r\n});\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/accordion.js?')},"./src/js/main.js":function srcJsMainJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _testimonials_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./testimonials.js */ "./src/js/testimonials.js");\n/* harmony import */ var _accordion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accordion.js */ "./src/js/accordion.js");\n/* harmony import */ var _accordion_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_accordion_js__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\r\n\r\nconst togglerBtn = document.querySelector(".main-nav--toggler");\r\nconst linksContainer = document.querySelector(".main-nav__links-container");\r\nconst hamburgerLines = document.querySelectorAll(".main-nav--toggler-line");\r\n\r\ntogglerBtn.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    hamburgerLines.forEach((el) => el.classList.toggle("active"));\r\n    linksContainer.classList.toggle("active");\r\n});\r\n\r\nlinksContainer.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    if ([...hamburgerLines].some((el) => el.classList.contains("active"))) {\r\n        hamburgerLines.forEach((el) => el.classList.remove("active"));\r\n        linksContainer.classList.remove("active");\r\n    }\r\n});\r\n\r\ndocument.addEventListener("DOMContentLoaded", () => {\r\n    [...accordionContents].forEach((el) => el.classList.add("hidden"));\r\n});\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/main.js?')},"./src/js/reviews.js":function srcJsReviewsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "reviews": () => (/* binding */ reviews)\n/* harmony export */ });\nconst reviews = [\r\n    {\r\n        id: 1,\r\n        name: "Cat One",\r\n        job: "UX",\r\n        img: "img/cat-1.jpg",\r\n        text: "Odličan posao na našoj kući u Vinišću, izuzetno smo zadovoljni kvalitetom i radom.",\r\n    },\r\n    {\r\n        id: 2,\r\n        name: "Cat Two",\r\n        job: "Graphics",\r\n        img: "img/cat-2.jpg",\r\n        text: "This is some random text",\r\n    },\r\n    {\r\n        id: 3,\r\n        name: "Cat One",\r\n        job: "Tester",\r\n        img: "img/cat-3.jpg",\r\n        text: "This is some random text",\r\n    },\r\n];\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/reviews.js?')},"./src/js/testimonials.js":function srcJsTestimonialsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _reviews_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reviews.js */ "./src/js/reviews.js");\n\r\n\r\nconst testimonialContainer = document.querySelector(".testimonials");\r\nconst testimonialImg = document.querySelector(".testimonials__img");\r\nconst testimonialTitle = document.querySelector(".testimonials__title");\r\nconst testimonialJob = document.querySelector(".testimonials__job");\r\nconst testimonialInfo = document.querySelector(".testimonials__info");\r\nconst btnTestimonialLeft = document.querySelector(\r\n    ".testimonials__button--left"\r\n);\r\nconst btnTestimonialRight = document.querySelector(\r\n    ".testimonials__button--right"\r\n);\r\n\r\n// State\r\nlet currentNumber = 0;\r\nconst intervalTiming = 2250;\r\nlet interval = setInterval(() => intervalSetup(), intervalTiming);\r\n\r\n// Event Listeners\r\ntestimonialContainer.addEventListener("mouseover", () => {\r\n    clearInterval(interval);\r\n});\r\n\r\ntestimonialContainer.addEventListener("mouseout", () => {\r\n    interval = setInterval(() => intervalSetup(), intervalTiming);\r\n});\r\n\r\nbtnTestimonialLeft.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    currentNumber--;\r\n    moveItem();\r\n});\r\n\r\nbtnTestimonialRight.addEventListener("click", (e) => {\r\n    e.preventDefault();\r\n    currentNumber++;\r\n    moveItem();\r\n});\r\n\r\nwindow.addEventListener("DOMContentLoaded", () => {\r\n    const item = _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews[currentNumber];\r\n    setProperties(item);\r\n});\r\n\r\n// Logic - Functions\r\nfunction adjustNumber(num) {\r\n    if (num < 0) {\r\n        currentNumber = _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews.length - 1;\r\n        return currentNumber;\r\n    }\r\n    if (num > _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews.length - 1) {\r\n        currentNumber = 0;\r\n        return currentNumber;\r\n    }\r\n}\r\n\r\nfunction intervalSetup() {\r\n    currentNumber++;\r\n    moveItem();\r\n}\r\n\r\nfunction moveItem() {\r\n    if (isValidNumber(currentNumber)) {\r\n        setProperties(_reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews[currentNumber]);\r\n        return;\r\n    }\r\n    adjustNumber(currentNumber);\r\n    setProperties(_reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews[currentNumber]);\r\n}\r\n\r\nfunction isValidNumber(num) {\r\n    return Number.isFinite(num) && num >= 0 && num < _reviews_js__WEBPACK_IMPORTED_MODULE_0__.reviews.length;\r\n}\r\n\r\nfunction setProperties(item) {\r\n    testimonialImg.src = item.img;\r\n    testimonialTitle.textContent = item.name;\r\n    testimonialJob.textContent = item.job;\r\n    testimonialInfo.textContent = item.text;\r\n}\r\n\n\n//# sourceURL=webpack://gulpstarter/./src/js/testimonials.js?')}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];return void 0!==n||(n=__webpack_module_cache__[e]={exports:{}},__webpack_modules__[e](n,n.exports,__webpack_require__)),n.exports}__webpack_require__.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=function(e,n){for(var r in n)__webpack_require__.o(n,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},__webpack_require__.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/js/main.js")}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
